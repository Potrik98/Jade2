#include "evaluate.h"
#include "boardutils.h"

static const int mirror64[64] = {
    56, 57, 58, 59, 60, 61, 62, 63,
    48, 49, 50, 51, 52, 53, 54, 55,
    40, 41, 42, 43, 44, 45, 46, 47,
    32, 33, 34, 35, 36, 37, 38, 39,
    24, 25, 26, 27, 28, 29, 30, 31,
    16, 17, 18, 19, 20, 21, 22, 23,
    8, 9, 10, 11, 12, 13, 14, 15,
    0, 1, 2, 3, 4, 5, 6, 7
};
static const int scoreTable[13][64] = {
    {},
    {
         0,   0,   0,   0,   0,   0,   0,   0,
        10,  10,   0, -10, -10,   0,  10,  10,
         5,   0,   0,   5,   5,   0,   0,   5,
         0,   0,  10,  20,  20,  10,   0,   0,
         5,   5,   5,  10,  10,   5,   5,   5,
        10,  10,  10,  20,  20,  10,  10,  10,
        20,  20,  20,  30,  30,  20,  20,  20,
         0,   0,   0,   0,   0,   0,   0,   0
    },{
         0, -10,   0,   0,   0,   0, -10,   0,
         0,   0,   0,   5,   5,   0,   0,   0,
         0,   0,  10,  10,  10,  10,   0,   0,
         0,   0,  10,  20,  20,  10,   5,   0,
         5,  10,  15,  20,  20,  15,  10,   5,
         5,  10,  10,  20,  20,  10,  10,   5,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0
    },{
         0,   0, -10,   0,   0, -10,   0,   0,
         0,   0,   0,  10,  10,   0,   0,   0,
         0,   0,  10,  15,  15,  10,   0,   0,
         0,  10,  15,  20,  20,  15,  10,   0,
         0,  10,  15,  20,  20,  15,  10,   0,
         0,   0,  10,  15,  15,  10,   0,   0,
         0,   0,   0,  10,  10,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0
    },{
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
        25,  25,  25,  25,  25,  25,  25,  25,
         0,   0,   5,  10,  10,   5,   0,   0
    },{
         0,   0,   0, -10,   0,   0,   0,   0,
         0,   0,   5,   5,   5,   0,   0,   0,
         0,  10,   2,   5,   5,   8,   0,   0,
        10,   0,   5,  10,  10,   5,  10,   0,
         0,   0,   5,  10,  10,   5,   0,  10,
         0,   0,   3,   5,   5,   3,   0,   0,
         3,   5,   7,   7,   7,   7,   5,   3,
         1,   2,   3,   4,   4,   3,   2,   1
    },{} ,{
         0,   0,   0,   0,  0,    0,   0,   0,
        10,  10,   0, -10, -10,   0,  10,  10,
         5,   0,   0,   5,   5,   0,   0,   5,
         0,   0,  10,  20,  20,  10,   0,   0,
         5,   5,   5,  10,  10,   5,   5,   5,
        10,  10,  10,  20,  20,  10,  10,  10,
        20,  20,  20,  30,  30,  20,  20,  20,
         0,   0,   0,   0,   0,   0,   0,   0
    },{
         0, -10,   0,   0,   0,   0, -10,   0,
         0,   0,   0,   5,   5,   0,   0,   0,
         0,   0,  10,  10,  10,  10,   0,   0,
         0,   0,  10,  20,  20,  10,   5,   0,
         5,  10,  15,  20,  20,  15,  10,   5,
         5,  10,  10,  20,  20,  10,  10,   5,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0
    },{
         0,   0, -10,   0,   0, -10,   0,   0,
         0,   0,   0,  10,  10,   0,   0,   0,
         0,   0,  10,  15,  15,  10,   0,   0,
         0,  10,  15,  20,  20,  15,  10,   0,
         0,  10,  15,  20,  20,  15,  10,   0,
         0,   0,  10,  15,  15,  10,   0,   0,
         0,   0,   0,  10,  10,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0
    },{
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
         0,   0,   5,  10,  10,   5,   0,   0,
        25,  25,  25,  25,  25,  25,  25,  25,
         0,   0,   5,  10,  10,   5,   0,   0
    },{
         0,   0,   0, -10,   0,   0,   0,   0,
         0,   0,   5,   5,   5,   0,   0,   0,
         0,  10,   2,   5,   5,   8,   0,   0,
        10,   0,   5,  10,  10,   5,  10,   0,
         0,   0,   5,  10,  10,   5,   0,  10,
         0,   0,   3,   5,   5,   3,   0,   0,
         3,   5,   7,   7,   7,   7,   5,   3,
         1,   2,   3,   4,   4,   3,   2,   1
    },{}
};

int evaluate(const Board *board) {
    int score = board->material[WHITE] - board->material[BLACK];

    for (int piece = wP; piece < wK; piece++) {
        for (int i = 0; i < board->pieceNum[piece]; i++) {
            int sq = board->pieceSquareList[piece][i];
            score += scoreTable[piece][SQ64(sq)];
        }
    }
    for (int piece = bP; piece < bK; piece++) {
        for (int i = 0; i < board->pieceNum[piece]; i++) {
            int sq = board->pieceSquareList[piece][i];
            score -= scoreTable[piece][mirror64[SQ64(sq)]];
        }
    }

    return board->sideToMove == WHITE ? score : -score;
}